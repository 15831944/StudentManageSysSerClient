#include "AuthorityMgr.h"

AuthorityMgr::AuthorityMgr()
{

}

AuthorityMgr::~AuthorityMgr()
{

}


void AuthorityMgr::GetDefaultAuthorityByIdent(IdentType Ident, vector<OperPermission>& vecOper)
{
	vecOper.clear();
	if (IDENT_TYPE_STUDENT == Ident)
	{
		vecOper.push_back(OPER_PER_LOGIN);
		vecOper.push_back(OPER_PER_REGISTER);

		vecOper.push_back(OPER_PER_SELECTSINGLESCOREBYONESUBJECT);
		vecOper.push_back(OPER_PER_SELECTSINGLESCOREBYSUBJECTS);

		vecOper.push_back(OPER_PER_UPDATESINGLEUSERINFOEBYONE);
		vecOper.push_back(OPER_PER_UPDATESINGLEUSERINFOBYMORE);
		vecOper.push_back(OPER_PER_SELECTSINGLEUSERINFO);
	}
	else if (IDENT_TYPE_TEACHER == Ident)
	{
		vecOper.push_back(OPER_PER_LOGIN);
		vecOper.push_back(OPER_PER_REGISTER);

		vecOper.push_back(OPER_PER_ADDBATCHSCOREBYONESUBJECT);
		vecOper.push_back(OPER_PER_ADDBATCHSCOREBYSUBJECTS);
		vecOper.push_back(OPER_PER_ADDSINGLESCOREBYONESUBJECT);
		vecOper.push_back(OPER_PER_ADDSINGLESCOREBYSUBJECTS);
		vecOper.push_back(OPER_PER_UPDATEBATCHSCOREBYONESUBJECT);
		vecOper.push_back(OPER_PER_UPDATEBATCHSCOREBYSUBJECTS);
		vecOper.push_back(OPER_PER_UPDATESINGLESCOREBYONESUBJECT);
		vecOper.push_back(OPER_PER_UPDATESINGLESCOREBYSUBJECTS);
		vecOper.push_back(OPER_PER_SELECTBATCHSCOREBYONESUBJECT);
		vecOper.push_back(OPER_PER_SELECTBATCHSCOREBYSUBJECTS);
		vecOper.push_back(OPER_PER_SELECTSINGLESCOREBYONESUBJECT);
		vecOper.push_back(OPER_PER_SELECTSINGLESCOREBYSUBJECTS);
		vecOper.push_back(OPER_PER_DELETEBATCHSCORE);
		vecOper.push_back(OPER_PER_DELETESINGLESCORE);
		vecOper.push_back(OPER_PER_ALTERADDONESCORESUBJECT);
		vecOper.push_back(OPER_PER_ALTERDELETEONESCORESUBJECT);

		vecOper.push_back(OPER_PER_ADDBATCHUSERINFO);
		vecOper.push_back(OPER_PER_ADDSINGLEUSERINFO);
		vecOper.push_back(OPER_PER_UPDATEBATCHUSERINFOBYONE);
		vecOper.push_back(OPER_PER_UPDATEBATCHUSERINFOBYMORE);
		vecOper.push_back(OPER_PER_UPDATESINGLEUSERINFOEBYONE);
		vecOper.push_back(OPER_PER_UPDATESINGLEUSERINFOBYMORE);
		vecOper.push_back(OPER_PER_SELECTBATCHUSERINFO);
		vecOper.push_back(OPER_PER_SELECTSINGLEUSERINFO);
		vecOper.push_back(OPER_PER_DELETEBATCHUSERINFO);
		vecOper.push_back(OPER_PER_DELETESINGLEUSERINFO);
	}
	else if (IDENT_TYPE_ADMIN == Ident)
	{
		vecOper.push_back(OPER_PER_LOGIN);
		vecOper.push_back(OPER_PER_REGISTER);

		vecOper.push_back(OPER_PER_ADDBATCHSCOREBYONESUBJECT);
		vecOper.push_back(OPER_PER_ADDBATCHSCOREBYSUBJECTS);
		vecOper.push_back(OPER_PER_ADDSINGLESCOREBYONESUBJECT);
		vecOper.push_back(OPER_PER_ADDSINGLESCOREBYSUBJECTS);
		vecOper.push_back(OPER_PER_UPDATEBATCHSCOREBYONESUBJECT);
		vecOper.push_back(OPER_PER_UPDATEBATCHSCOREBYSUBJECTS);
		vecOper.push_back(OPER_PER_UPDATESINGLESCOREBYONESUBJECT);
		vecOper.push_back(OPER_PER_UPDATESINGLESCOREBYSUBJECTS);
		vecOper.push_back(OPER_PER_SELECTBATCHSCOREBYONESUBJECT);
		vecOper.push_back(OPER_PER_SELECTBATCHSCOREBYSUBJECTS);
		vecOper.push_back(OPER_PER_SELECTSINGLESCOREBYONESUBJECT);
		vecOper.push_back(OPER_PER_SELECTSINGLESCOREBYSUBJECTS);
		vecOper.push_back(OPER_PER_DELETEBATCHSCORE);
		vecOper.push_back(OPER_PER_DELETESINGLESCORE);
		vecOper.push_back(OPER_PER_ALTERADDONESCORESUBJECT);
		vecOper.push_back(OPER_PER_ALTERDELETEONESCORESUBJECT);

		vecOper.push_back(OPER_PER_ADDBATCHUSERINFO);
		vecOper.push_back(OPER_PER_ADDSINGLEUSERINFO);
		vecOper.push_back(OPER_PER_UPDATEBATCHUSERINFOBYONE);
		vecOper.push_back(OPER_PER_UPDATEBATCHUSERINFOBYMORE);
		vecOper.push_back(OPER_PER_UPDATESINGLEUSERINFOEBYONE);
		vecOper.push_back(OPER_PER_UPDATESINGLEUSERINFOBYMORE);
		vecOper.push_back(OPER_PER_SELECTBATCHUSERINFO);
		vecOper.push_back(OPER_PER_SELECTSINGLEUSERINFO);
		vecOper.push_back(OPER_PER_DELETEBATCHUSERINFO);
		vecOper.push_back(OPER_PER_DELETESINGLEUSERINFO);

		vecOper.push_back(OPER_PER_ADDAUTHORITBYONE);
		vecOper.push_back(OPER_PER_DELETEAUTHORITBYONE);
	}
	else
	{
		printf("%s  身份标识错误Ident[%d]\n", __FUNCTION__, Ident);
	}
}
